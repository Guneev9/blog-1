<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Did you say data?</title>
    <link>/project/</link>
    <description>Recent content in Projects on Did you say data?</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/project/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Asynchronous Gossip Protocol and Push-Sum</title>
      <link>/project/gossip-protocol/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/project/gossip-protocol/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Twitter Engine</title>
      <link>/project/twitter-engine/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/project/twitter-engine/</guid>
      <description>Overview The application can be seen at https://github.com/krohitm/Twitter-Simulator.
Client-Server
A client upon connection is able to write tweets as well as search tweets with hashtags and mentions. Tweets contain randomly generated hashtags. Every tweet contains a random mention of another user, chosen by the simulator. A client can also log itself off and upon login receive its tweets. Also, clients are able to retweet.
Simulator
 The Simulator is a separate process and dictates what requests clients can send.</description>
    </item>
    
    <item>
      <title>Twitter Simulator</title>
      <link>/project/twitter-simulator/</link>
      <pubDate>Mon, 09 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/project/twitter-simulator/</guid>
      <description>Link to demo video: https://youtu.be/XlY2eoI5o-8
Part 1 of this project can be seen at https://github.com/krohitm/Twitter-Simulator
The part 1 of our project had all the functionalities working. In part 2 we have used the exact same server that acts as an API to the Phoenix channels (check architecture section for details). This Server that acts as API can handle all the following:
 Tweeting to followers Searching tweets - tweets, tweets with hashtags, tweets with mentions Retweet a tweet that a user receives  We have broken down the implementation into two parts:</description>
    </item>
    
  </channel>
</rss>