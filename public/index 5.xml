<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kumar&#39;s blog on Kumar&#39;s blog</title>
    <link>/</link>
    <description>Recent content in Kumar&#39;s blog on Kumar&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 -0400</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Exploratory Data Analysis</title>
      <link>/post/exploratory-data-analysis/</link>
      <pubDate>Wed, 28 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/exploratory-data-analysis/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-r setup, include=FALSE, message=FALSE&#34;&gt;knitr::opts_chunk$set(echo = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)
library(extraDistr)
library(tidyverse)
#library(plotly)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The data source is obtained from &lt;a href=&#34;https://www.cdc.gov/nchs/nsfg/nsfg_cycle6.htm&#34; target=&#34;_blank&#34;&gt;https://www.cdc.gov/nchs/nsfg/nsfg_cycle6.htm&lt;/a&gt;
This contains fixed width files, and stata dictionaries consisting of columns for the data files&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#helper function to parse Stata dictionary
dct.parser &amp;lt;- function(dct, includes = c(&amp;quot;StartPos&amp;quot;, &amp;quot;StorageType&amp;quot;, &amp;quot;ColName&amp;quot;, 
                                         &amp;quot;ColWidth&amp;quot;, &amp;quot;VarLabel&amp;quot;),
                       preview = FALSE) {
  temp &amp;lt;- readLines(dct)
  temp &amp;lt;- temp[grepl(&amp;quot;_column&amp;quot;, temp)]
  
  if (isTRUE(preview)) {
    head(temp)
  } else {
    possibilities &amp;lt;- c(&amp;quot;StartPos&amp;quot;, &amp;quot;StorageType&amp;quot;, 
                       &amp;quot;ColName&amp;quot;, &amp;quot;ColWidth&amp;quot;, &amp;quot;VarLabel&amp;quot;)
    classes &amp;lt;- c(&amp;quot;numeric&amp;quot;, &amp;quot;character&amp;quot;, &amp;quot;
                 character&amp;quot;, &amp;quot;numeric&amp;quot;, &amp;quot;character&amp;quot;)
    pattern &amp;lt;- c(StartPos = &amp;quot;.*\\(([0-9 ]+)\\)&amp;quot;,
                 StorageType = &amp;quot;(byte|int|long|float|double|str[0-9]+)&amp;quot;,
                 ColName = &amp;quot;(.*)&amp;quot;,
                 ColWidth = &amp;quot;%([0-9.]+)[a-z]+&amp;quot;,
                 VarLabel = &amp;quot;(.*)&amp;quot;)
    
    mymatch &amp;lt;- match(includes, possibilities)
    
    pattern &amp;lt;- paste(paste(pattern[mymatch], 
                           collapse =&amp;quot;\\s+&amp;quot;), &amp;quot;$&amp;quot;, sep = &amp;quot;&amp;quot;)    
    
    metadata &amp;lt;- setNames(lapply(seq_along(mymatch), function(x) {
      out &amp;lt;- gsub(pattern, paste(&amp;quot;\\&amp;quot;, x, sep = &amp;quot;&amp;quot;), temp)
      out &amp;lt;- gsub(&amp;quot;^\\s+|\\s+$&amp;quot;, &amp;quot;&amp;quot;, out)
      out &amp;lt;- gsub(&#39;\&amp;quot;&#39;, &amp;quot;&amp;quot;, out, fixed = TRUE)
      class(out) &amp;lt;- classes[mymatch][x] ; out }), 
                         possibilities[mymatch])
    
    implicit.dec &amp;lt;- grepl(&amp;quot;\\.[1-9]&amp;quot;, metadata[[&amp;quot;ColWidth&amp;quot;]])
    if (any(implicit.dec)) {
      message(&amp;quot;Some variables may need to be corrected for implicit decimals. 
              Try &#39;MESSAGES(output_from_dct.parser)&#39; for more details.&amp;quot;)
      metadata[[&amp;quot;Decimals&amp;quot;]] &amp;lt;- rep(NA, length(metadata[[&amp;quot;ColWidth&amp;quot;]]))
      metadata[[&amp;quot;Decimals&amp;quot;]][implicit.dec] &amp;lt;-
        as.numeric(gsub(&amp;quot;[0-9]+\\.&amp;quot;, &amp;quot;&amp;quot;, 
                        metadata[[&amp;quot;ColWidth&amp;quot;]][implicit.dec]))
      metadata[[&amp;quot;ColWidth&amp;quot;]] &amp;lt;- floor(as.numeric(metadata[[&amp;quot;ColWidth&amp;quot;]]))
    }
    
    metadata[[&amp;quot;ColName&amp;quot;]] &amp;lt;- make.names(
      gsub(&amp;quot;\\s&amp;quot;, &amp;quot;&amp;quot;, metadata[[&amp;quot;ColName&amp;quot;]]))
    
    metadata &amp;lt;- data.frame(metadata)
    
    if (&amp;quot;StorageType&amp;quot; %in% includes) {
      metadata &amp;lt;- 
        within(metadata, {
          colClasses &amp;lt;- ifelse(
            StorageType == &amp;quot;byte&amp;quot;, &amp;quot;raw&amp;quot;,
            ifelse(StorageType %in% c(&amp;quot;double&amp;quot;, &amp;quot;long&amp;quot;, &amp;quot;float&amp;quot;), 
                   &amp;quot;numeric&amp;quot;, 
                   ifelse(StorageType == &amp;quot;int&amp;quot;, &amp;quot;integer&amp;quot;,
                          ifelse(substr(StorageType, 1, 3) == &amp;quot;str&amp;quot;, 
                                 &amp;quot;character&amp;quot;, NA))))
        })
    }
    if (any(implicit.dec)) {
      attr(metadata, &amp;quot;MESSAGE&amp;quot;) &amp;lt;- c(sprintf(&amp;quot;%s&amp;quot;, paste(
        &amp;quot;Some variables might need to be corrected for implicit decimals. 
        A variable, &#39;Decimals&#39;, has been created in the metadata that
        indicates the number of decimal places the variable should hold. 
        To correct the output, try (where your stored output is &#39;mydf&#39;): 
        
        lapply(seq_along(mydf[!is.na(Decimals)]), 
        function(x) mydf[!is.na(Decimals)][x]
        / 10^Decimals[!is.na(Decimals)][x])
        
        The variables in question are:
        &amp;quot;)), sprintf(&amp;quot;%s&amp;quot;, metadata[[&amp;quot;ColName&amp;quot;]][!is.na(metadata[[&amp;quot;Decimals&amp;quot;]])]))
            class(attr(metadata, &amp;quot;MESSAGE&amp;quot;)) &amp;lt;- c(
                &amp;quot;MESSAGE&amp;quot;, class(attr(metadata, &amp;quot;MESSAGE&amp;quot;)))
        }
        attr(metadata, &amp;quot;original.dictionary&amp;quot;) &amp;lt;- 
            c(dct, basename(dct))
        metadata
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can read the coulmns from 2002FemPreg.dct and use those columns to import the data from the fixed width file 2002FemPreg.dat&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;femPreg2002columns &amp;lt;- dct.parser(&#39;~/Documents/CodeWork/ThinkStats2/code/2002FemPreg.dct&#39;)
femPreg2002 &amp;lt;- read.fwf(&#39;~/Documents/CodeWork/ThinkStats2/code/2002FemPreg.dat&#39;, widths = femPreg2002columns$ColWidth, col.names = femPreg2002columns$ColName)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Taking a look at the data&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(femPreg2002)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see a lot of missing values. We&amp;rsquo;ll clean the data for the columns that we want to analyze.&lt;/p&gt;

&lt;h2 id=&#34;transformation&#34;&gt;Transformation&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;agepreg contains the mother&amp;rsquo;s age at the end of the pregnancy. In the data file, agepreg is encoded as an integer number of centiyears. So the first line divides each element of agepreg by 100, yielding a floating-point value in years.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;birthwgt_lb and birthwgt_oz contain the weight of the baby, in pounds and ounces, for pregnancies that end in live birth. In addition it uses several special codes:
97 NOT ASCERTAINED
98 REFUSED
99 DONT KNOW
Special values encoded as numbers are dangerous because if they are not
handled properly, they can generate bogus results, like a 99-pound baby. Assuming that a baby can&amp;rsquo;t be generally more than 20 lb at birth, we will replace all other values with NA, as they are NOT ASCERTAINED(97),  REFUSED(98), DONT KNOW(99), or invalid values.
Similarly, the age of father has these similar special codes, which we will replace by NA
```{r}
cleanFemPreg &amp;lt;- function(data){&lt;/p&gt;

&lt;h1 id=&#34;mother-s-age-is-encoded-in-centiyears-convert-to-years&#34;&gt;mother&amp;rsquo;s age is encoded in centiyears; convert to years&lt;/h1&gt;

&lt;p&gt;data[&amp;lsquo;agepreg&amp;rsquo;] &amp;lt;-  data[&amp;lsquo;agepreg&amp;rsquo;]/100.0&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;# birthwgt_lb contains at least one bogus value (51 lbs)
  # replace with NaN
  data$birthwgt_lb[data$birthwgt_lb &amp;gt; 20] &amp;lt;- NA&lt;/p&gt;

&lt;p&gt;# replace &amp;lsquo;not ascertained&amp;rsquo;, &amp;lsquo;refused&amp;rsquo;, &amp;lsquo;don&amp;rsquo;t know&amp;rsquo; with NA
  na_vals = c(97, 98, 99)
  data$birthwgt_oz[data$birthwgt_oz %in% na_vals] &amp;lt;- NA
  data$hpagelb[data$hpagelb %in% na_vals] &amp;lt;- NA&lt;/p&gt;

&lt;p&gt;# birthweight is stored in two columns, lbs and oz.
  # convert to a single column in lb
  data[&amp;lsquo;totalwgt_lb&amp;rsquo;] &amp;lt;- data$birthwgt_lb + (data$birthwgt_oz / 16.0)&lt;/p&gt;

&lt;p&gt;return (data)
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
```{r}
femPregCleaned &amp;lt;- cleanFemPreg(femPreg2002)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;validation&#34;&gt;Validation&lt;/h3&gt;

&lt;p&gt;One way to validate data is to compute basic statistics and compare them with published results. For example, the NSFG codebook includes tables that summarize each variable. Here is the table for outcome, which encodes the outcome of each pregnancy:
value     label         Total
1         LIVE BIRTH        9148
2         INDUCED ABORTION  1862
3         STILLBIRTH        120
4         MISCARRIAGE       1921
5         ECTOPIC PREGNANCY 190
6         CURRENT PREGNANCY 352&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;femPreg2002 %&amp;gt;%
  group_by(outcome) %&amp;gt;%
  summarise(Total = length(outcome))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comparing the results with the published table, it looks like the values in
outcome are correct. Similarly, here is the published table for birthwgt_lb
value     label             Total
.         INAPPLICABLE      4449
0-5       UNDER 6 POUNDS    1125
6         6 POUNDS          2223
7         7 POUNDS          3049
8         8 POUNDS          1889
9-95      9 POUNDS OR MORE  799&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;femPreg2002 %&amp;gt;%
  group_by(birthwgt_lb) %&amp;gt;%
  summarise(Total = length(birthwgt_lb))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The counts for 6, 7, and 8 pounds check out, and if you add up the counts
for 0-5 and 9-95, they check out, too. But if you look more closely, you will
notice one value that has to be an error, a 51 pound baby! This has been cleaned in the cleanFemPreg function.&lt;/p&gt;

&lt;h3 id=&#34;interpretation&#34;&gt;Interpretation&lt;/h3&gt;

&lt;p&gt;To work with data effectively, you have to think on two levels at the same time: the level of statistics and the level of context.
As an example, let&amp;rsquo;s look at the sequence of outcomes for a few respondents.
This example looks up one respondent and prints a list of outcomes for her
pregnancies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;CASEID = 10229
femPregCleaned %&amp;gt;%
  filter(caseid==CASEID) %&amp;gt;%
  .$outcome
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The outcome code 1 indicates a live birth. Code 4 indicates a miscarriage; that is, a pregnancy that ended spontaneously, usually with no known medical cause.&lt;/p&gt;

&lt;p&gt;Statistically this respondent is not unusual. Miscarriages are common and there are other respondents who reported as many or more. But remembering the context, this data tells the story of a woman who was pregnant six times, each time ending in miscarriage. Her seventh and most recent pregnancy ended in a live birth. If we consider this data with empathy,
it is natural to be moved by the story it tells.&lt;/p&gt;

&lt;p&gt;Each record in the NSFG dataset represents a person who provided honest answers to many personal and difficult questions. We can use this data to answer statistical questions about family life, reproduction, and health. At the same time, we have an obligation to consider the people represented by the data, and to afford them respect and gratitude.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Global Terrorism analysis</title>
      <link>/post/global-terrorism-analysis/</link>
      <pubDate>Wed, 28 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/global-terrorism-analysis/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-r setup, include=FALSE, echo=FALSE&#34;&gt;knitr::opts_chunk$set(echo=FALSE, 
                      error=FALSE,
                      fig.path = &amp;quot;README_figs/README-&amp;quot;,
                      warning = FALSE,
                      message=FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;options(warn=-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyr)
library(dplyr)
library(plotly)
library(rworldmap)
library(maps)
library(ggmap)
library(reshape2)
library(raster)
library(rgdal)
library(rgeos)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;terr = read.csv(&#39;~/Downloads/globalterrorismdb_0617dist.csv&#39;, check.names = FALSE, header = TRUE, stringsAsFactors = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;c(ncol(terr),nrow(terr))
sum(is.na(terr))#/(ncol(data)*nrow(data))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;terr=rename(terr, id=eventid, year=iyear, nation=country_txt, 
            Region=region_txt, attack=attacktype1_txt,
            target=targtype1_txt, weapon=weaptype1_txt, 
            Killed=nkill, wounded=nwound)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;data-cleaning&#34;&gt;Data cleaning&lt;/h2&gt;

&lt;p&gt;We clean the data&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;terr$Killed=as.integer(terr$Killed)
terr$wounded=as.integer(terr$wounded)

terr$Killed[which(is.na(terr$Killed))] = 0
terr$wounded[which(is.na(terr$wounded))] = 0


terr$nation[terr$nation==&amp;quot;United States&amp;quot;] &amp;lt;- &amp;quot;USA&amp;quot;
terr$nation[terr$nation==&amp;quot;United Kingdom&amp;quot;] &amp;lt;- &amp;quot;UK&amp;quot;
terr$nation[terr$nation==&amp;quot;People&#39;s Republic of the Congo&amp;quot;] &amp;lt;- &amp;quot;Republic of Congo&amp;quot;
terr$nation[terr$nation==&amp;quot;Bosnia-Herzegovina&amp;quot;] &amp;lt;- &amp;quot;Bosnia and Herzegovina&amp;quot;
terr$nation[terr$nation==&amp;quot;Slovak Republic&amp;quot;] &amp;lt;- &amp;quot;Slovakia&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;global_t &amp;lt;- 
  terr %&amp;gt;%
  group_by(year,nation,Region) %&amp;gt;%
  summarize(Total=n())

global_y &amp;lt;- global_t%&amp;gt;%group_by(year)%&amp;gt;%summarize(Total=sum(Total))
global_attacks &amp;lt;- 
  global_t %&amp;gt;%
  group_by(nation) %&amp;gt;%
  summarize(Total=sum(Total)) %&amp;gt;% 
  arrange(desc(Total))
#%&amp;gt;%filter(Total&amp;gt;300)
#global_attacks$Total[which(is.na(global_attacks$Total))] = 0

attach(global_attacks)
global_n &amp;lt;- global_attacks[order(-Total),]
detach(global_attacks)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;global_kills_years &amp;lt;- terr%&amp;gt;%group_by(year)%&amp;gt;%summarize(killed=sum(Killed))
global_wound_years &amp;lt;- terr%&amp;gt;%group_by(year)%&amp;gt;%summarize(wounded=sum(wounded))
globe &amp;lt;- 
  global_kills_years %&amp;gt;% 
  inner_join(global_wound_years, by=&amp;quot;year&amp;quot;)

df &amp;lt;- melt(globe, &amp;quot;year&amp;quot;)
df=rename(df, effect=variable)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;world &amp;lt;- map_data(&amp;quot;world&amp;quot;)
global &amp;lt;- rename(terr, long=longitude, lat=latitude)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#helper theme for common visualizations
ditch_the_axes &amp;lt;- theme(
  axis.text = element_blank(),
  axis.line = element_blank(),
  axis.ticks = element_blank(),
  panel.border = element_blank(),
  panel.grid = element_blank(),
  axis.title = element_blank()
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#helper function to visualize maps for varaibles for counts
visualize_count_map &amp;lt;- function(global_table, title){
  global_table &amp;lt;- 
    global_table %&amp;gt;%
    rename(region=nation)

  #join the data found with world data
  world_table &amp;lt;- right_join(global_table, world, by=&amp;quot;region&amp;quot;)
  world_table$Total[which(is.na(world_table$Total))]=0
  
  g &amp;lt;- ggplot(data = world, aes(x = long, y = lat, group = group)) + 
  coord_fixed(1.3) +
  ditch_the_axes+
  theme(legend.position = &amp;quot;none&amp;quot;, panel.background = NULL)+
  geom_polygon(data = world_table, aes(label = region, fill = Total), color =&amp;quot;white&amp;quot;) +
  scale_fill_gradientn(colours=c(&amp;quot;#e1eec3&amp;quot;,&amp;quot;#f05053&amp;quot;))+
  ggtitle(title)

  ggplotly(g, width = 850, height = 480)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#Let&amp;rsquo;s look at the number of terrorist attacks across the globe.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;visualize_count_map(global_attacks, &amp;quot;Number of terrorist attacks around the world&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#Let&amp;rsquo;s look at the number of people killed across the global in terrorist atttacks.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;global_kills &amp;lt;- 
  global %&amp;gt;% 
  group_by(nation) %&amp;gt;% 
  summarise(Total = sum(Killed))

visualize_count_map(global_kills, &amp;quot;Number of people killed around the world&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;global_wound &amp;lt;- 
  global %&amp;gt;% 
  group_by(nation) %&amp;gt;% 
  summarise(Total = sum(wounded))

visualize_count_map(global_wound, &amp;quot;Number of people wounded around the world&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#Let&amp;rsquo;s look at the type of weapons used the most in terrorist attacks across the globe.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#get weapon most used in each nation
global_weapons_max_type &amp;lt;- 
  terr[c(&#39;nation&#39;, &#39;weapon&#39;)] %&amp;gt;% 
  group_by(nation, weapon) %&amp;gt;%
  summarize(Total=n()) %&amp;gt;%
  filter(Total==max(Total)) %&amp;gt;%
  group_by(nation)

global_weapons_max_type &amp;lt;- 
  global_weapons_max_type %&amp;gt;%
  rename(region=nation)

#join the data found with world data
world_weapons &amp;lt;- right_join(global_weapons_max_type, world, by=&amp;quot;region&amp;quot;)
world_weapons$weapon[which(is.na(world_weapons$weapon))]=&amp;quot;Unknown&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;num_unique_weapons &amp;lt;- length(unique(world_weapons$weapon))
                             
g4 &amp;lt;- ggplot(data = world, aes(x = long, y = lat, group = group)) + 
  coord_fixed(1.3) +
  ditch_the_axes+
  theme(panel.background = NULL)+
  geom_polygon(data = world_weapons, aes(label = region, fill = factor(weapon)), color =&amp;quot;white&amp;quot;) +
  scale_fill_manual(values = c(rainbow(num_unique_weapons, 
                                       s = 0.6, 
                                       v = 0.8, start = 0, 
                                       end = max(1, num_unique_weapons - 1)/num_unique_weapons, 
                                       alpha = 0.7)))+
  ggtitle(&amp;quot;Most used weapons in terrorist attacks around the world&amp;quot;)

ggplotly(g4, width = 850, height = 480)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;visualize_factor_map &amp;lt;- function(global_table, factor, title) {
  global_attack_max_type &amp;lt;- 
    global_attack_max_type %&amp;gt;%
    rename(region=nation)

  #join the data found with world data
  world_attack_types &amp;lt;- right_join(global_attack_max_type, world, by=&amp;quot;region&amp;quot;)
  world_attack_types$attack[which(is.na(world_attack_types$attack))]=&amp;quot;Unknown&amp;quot;
  num_unique_attacks &amp;lt;- length(unique(global_attack_max_type$attack))
                             
  g5 &amp;lt;- ggplot(data = world, aes(x = long, y = lat, group = group)) + 
    coord_fixed(1.3) +
    ditch_the_axes+
    theme(panel.background = NULL)+
    geom_polygon(data = world_attack_types, aes(label = region, fill = factor(attack)), color =&amp;quot;white&amp;quot;) +
    scale_fill_manual(values = c(rainbow(num_unique_attacks, 
                                       s = 0.6, 
                                       v = 0.8, start = 0, 
                                       end = max(1, num_unique_attacks - 1)/num_unique_attacks, 
                                       alpha = 0.7)))+
  ggtitle(&amp;quot;Most particular type of attacks in different countries&amp;quot;)

ggplotly(g5, width = 900, height = 480)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#Let&amp;rsquo;s look at the most particular type of attacks in different countries.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#get weapon most used in each nation
global_attack_max_type &amp;lt;- 
  terr[c(&#39;nation&#39;, &#39;attack&#39;)] %&amp;gt;% 
  group_by(nation, attack) %&amp;gt;%
  summarize(Total=n()) %&amp;gt;%
  filter(Total==max(Total)) %&amp;gt;%
  group_by(nation)

global_attack_max_type &amp;lt;- 
  global_attack_max_type %&amp;gt;%
  rename(region=nation)

#join the data found with world data
world_attack_types &amp;lt;- right_join(global_attack_max_type, world, by=&amp;quot;region&amp;quot;)
world_attack_types$attack[which(is.na(world_attack_types$attack))]=&amp;quot;Unknown&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;num_unique_attacks &amp;lt;- length(unique(global_attack_max_type$attack))
                             
g5 &amp;lt;- ggplot(data = world, aes(x = long, y = lat, group = group)) + 
  coord_fixed(1.3) +
  ditch_the_axes+
  theme(panel.background = NULL)+
  geom_polygon(data = world_attack_types, aes(label = region, fill = factor(attack)), color =&amp;quot;white&amp;quot;) +
  scale_fill_manual(values = c(rainbow(num_unique_attacks, 
                                       s = 0.6, 
                                       v = 0.8, start = 0, 
                                       end = max(1, num_unique_attacks - 1)/num_unique_attacks, 
                                       alpha = 0.7)))+
  ggtitle(&amp;quot;Most particular type of attacks in different countries&amp;quot;)

ggplotly(g5, width = 900, height = 480)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#Let&amp;rsquo;s look at the most attacked targets in different countries&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#get weapon most used in each nation
global_target_max_type &amp;lt;- 
  terr[c(&#39;nation&#39;, &#39;target&#39;)] %&amp;gt;% 
  group_by(nation, target) %&amp;gt;%
  summarize(Total=n()) %&amp;gt;%
  filter(Total==max(Total)) %&amp;gt;%
  group_by(nation)

global_target_max_type &amp;lt;- 
  global_target_max_type %&amp;gt;%
  rename(region=nation)

#join the data found with world data
world_target_types &amp;lt;- right_join(global_target_max_type, world, by=&amp;quot;region&amp;quot;)
world_target_types$target[which(is.na(world_target_types$target))]=&amp;quot;Unknown&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;num_unique_targets &amp;lt;- length(unique(global_target_max_type$target))
                             
g6 &amp;lt;- ggplot(data = world, aes(x = long, y = lat, group = group)) + 
  coord_fixed(1.3) +
  ditch_the_axes+
  theme(panel.background = NULL)+
  geom_polygon(data = world_target_types, aes(label = region, fill = factor(target)), color =&amp;quot;white&amp;quot;) +
  scale_fill_manual(values=c(terrain.colors(num_unique_targets, alpha = 0.8)))+
  ggtitle(&amp;quot;Most particular type of targets in different countries&amp;quot;)

ggplotly(g6, width = 900, height = 480)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#Most active perpetrator groups around the world&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#get weapon most used in each nation
global_group_max_attacks &amp;lt;- 
  terr[c(&#39;nation&#39;, &#39;gname&#39;)] %&amp;gt;% 
  group_by(nation, gname) %&amp;gt;%
  summarize(Total=n()) %&amp;gt;%
  filter(gname!= &amp;quot;Unknown&amp;quot;) %&amp;gt;%
  filter(Total==max(Total)) %&amp;gt;%
  group_by(nation)

global_group_max_attacks &amp;lt;- 
  global_group_max_attacks %&amp;gt;%
  rename(region=nation)

#join the data found with world data
world_groups_attacks &amp;lt;- right_join(global_group_max_attacks, world, by=&amp;quot;region&amp;quot;)
world_groups_attacks$gname[which(is.na(world_groups_attacks$gname))]=&amp;quot;Unknown&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;num_unique_groups &amp;lt;- length(unique(global_group_max_attacks$gname))
terrorist_group &amp;lt;- factor(world_groups_attacks$gname)
                             
g7 &amp;lt;- ggplot(data = world, aes(x = long, y = lat, group = group)) + 
  coord_fixed(1.3) +
  ditch_the_axes+
  theme(legend.position = &amp;quot;none&amp;quot;, panel.background = NULL)+
  geom_polygon(data = world_groups_attacks, aes(label = region, fill = terrorist_group), color =&amp;quot;white&amp;quot;) +
  scale_fill_manual(values=c(topo.colors(num_unique_groups, alpha = 0.6)))+
  ggtitle(&amp;quot;Most active terrorist groups around the globe&amp;quot;)

ggplotly(g7, width = 850, height = 480)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#Taking a look at the international attacks&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#get weapon most used in each nation
global_int_attacks &amp;lt;- 
  terr[c(&#39;nation&#39;, &#39;INT_ANY&#39;)] %&amp;gt;% 
  filter(INT_ANY==&#39;1&#39;) %&amp;gt;%
  group_by(nation) %&amp;gt;%
  summarize(Total=n())

visualize_count_map(global_int_attacks, &amp;quot;International attacks around the globe&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#Taking a look at the domestic attacks&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#get weapon most used in each nation
global_dom_attacks &amp;lt;- 
  terr[c(&#39;nation&#39;, &#39;INT_ANY&#39;)] %&amp;gt;% 
  filter(INT_ANY==&#39;0&#39;) %&amp;gt;%
  group_by(nation) %&amp;gt;%
  summarize(Total=n())

visualize_count_map(global_dom_attacks, &amp;quot;Domestic attacks around the globe&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data_India &amp;lt;- filter(terr, nation == &amp;quot;India&amp;quot;)
data_India &amp;lt;- rename(data_India, long=longitude, lat=latitude)

India &amp;lt;- filter(world, region ==&amp;quot;India&amp;quot;)

#US$provstate &amp;lt;- tolower(US$provstate)

India_kills &amp;lt;- 
  data_India %&amp;gt;% 
  group_by(provstate) %&amp;gt;% 
  summarise(Killed = sum(Killed))
India_kills=rename(India_kills, subregion=provstate)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;### Get data
india &amp;lt;- getData(&amp;quot;GADM&amp;quot;, country = &amp;quot;India&amp;quot;, level = 1)

map &amp;lt;- fortify(india)
map$id &amp;lt;- as.integer(map$id)

dat &amp;lt;- data.frame(id = 1:(length(india@data$NAME_1)), state = india@data$NAME_1)
map_df &amp;lt;- inner_join(map, dat, by = &amp;quot;id&amp;quot;)

centers &amp;lt;- data.frame(gCentroid(india, byid = TRUE))
centers$state &amp;lt;- dat$state

ggplot() +
geom_map(data = map_df, map = map_df,
         aes(map_id = id, x = long, y = lat, group = group),
         color = &amp;quot;#ffffff&amp;quot;, fill = &amp;quot;#bbbbbb&amp;quot;, size = 0.25) +
geom_text(data = centers, aes(label = state, x = x, y = y), size = 2) +
coord_map() +
labs(x = &amp;quot;&amp;quot;, y = &amp;quot;&amp;quot;, title = &amp;quot;India State&amp;quot;) +
  ditch_the_axes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;India_kills = rename(India_kills, state=subregion)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;### Get data
india &amp;lt;- getData(&amp;quot;GADM&amp;quot;, country = &amp;quot;India&amp;quot;, level = 1)

map &amp;lt;- fortify(india)
map$id &amp;lt;- as.integer(map$id)

dat &amp;lt;- data.frame(id = 1:(length(india@data$NAME_1)), state = india@data$NAME_1)
India &amp;lt;- inner_join(map, dat, by = &amp;quot;id&amp;quot;)
#map_df &amp;lt;- inner_join(map_df, India_kills, by = &amp;quot;state&amp;quot;)

comb_India &amp;lt;- right_join(India_kills, India, by=&amp;quot;state&amp;quot;)

centers &amp;lt;- data.frame(gCentroid(india, byid = TRUE))
centers$state &amp;lt;- dat$state

head(India)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(dat)
head(map)
head(India_kills)
head(India)
head(comb_India)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;g2 &amp;lt;- ggplot(data = India, aes(x = long, y = lat, group = group)) + 
  coord_fixed(1.3) +
  ditch_the_axes+
  theme(legend.position = &amp;quot;none&amp;quot;, panel.background = NULL)+
  geom_polygon(data = comb_India, aes(label=state, fill = Killed), color = &amp;quot;white&amp;quot;) +
  scale_fill_gradientn(colours=c(&amp;quot;#e1eec3&amp;quot;,&amp;quot;#f05053&amp;quot;))+
  ggtitle(&amp;quot;Number of people killed in India&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplotly(g2, width = 800, height = 550)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;US&amp;lt;-filter(terr,nation ==&amp;quot;USA&amp;quot;)
US &amp;lt;- rename(US, long=longitude, lat=latitude)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;USf &amp;lt;- US%&amp;gt;%
  filter(long&amp;lt;0,lat&amp;lt;50,lat&amp;gt;27)%&amp;gt;%
  filter(Killed!=0)

USA &amp;lt;- map_data(&amp;quot;state&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(USA)
#unique(USA$group)
#unique(USA$region)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;US$provstate &amp;lt;- tolower(US$provstate)

USA_kills &amp;lt;- US %&amp;gt;% group_by(provstate) %&amp;gt;% summarise(Killed = sum(Killed))
USA_kills=rename(USA_kills, region=provstate)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(USA_kills)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cacopa &amp;lt;- right_join(USA_kills, USA, by=&amp;quot;region&amp;quot;)
head(cacopa)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#g1 + geom_polygon(data = USA, fill = NA, color = &amp;quot;white&amp;quot;) +
#  geom_polygon(color = &amp;quot;black&amp;quot;, fill = NA)

g2 &amp;lt;- ggplot(data = USA, aes(x = long, y = lat, group = group)) + 
  coord_fixed(1.3) +
  ditch_the_axes+
  theme(legend.position = &amp;quot;none&amp;quot;, panel.background = NULL)+
  geom_polygon(data = cacopa, aes(label=region, fill = Killed), color = &amp;quot;white&amp;quot;) +
  scale_fill_gradientn(colours=c(&amp;quot;#e1eec3&amp;quot;,&amp;quot;#f05053&amp;quot;))+
  ggtitle(&amp;quot;Number of people killed in US&amp;quot;)

ggplotly(g2, width = 800, height = 480)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>/talk/example-talk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 -0500</pubDate>
      
      <guid>/talk/example-talk/</guid>
      <description>&lt;p&gt;Embed your slides or video here using &lt;a href=&#34;https://sourcethemes.com/academic/post/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;shortcodes&lt;/a&gt;. Further details can easily be added using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deep Learning</title>
      <link>/project/deep-learning/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/deep-learning/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>/project/example-external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/example-external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Person Re-Identification System For Mobile Devices</title>
      <link>/publication/person-re-identification/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/publication/person-re-identification/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mobile visual clothing search</title>
      <link>/publication/clothing-search/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>/publication/clothing-search/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
